;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: TokenTransfer
;; Header: 0x0f8a7ea5
;; TLB: token_transfer#0f8a7ea5 queryId:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = TokenTransfer
;;

builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'queryId, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $TokenTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int queryId, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline {
    return (queryId, amount, destination, response_destination, custom_payload, forward_ton_amount, forward_payload);
}

;;
;; Type: TokenNotification
;; Header: 0x7362d09c
;; TLB: token_notification#7362d09c queryId:uint64 amount:coins from:address forward_payload:remainder<slice> = TokenNotification
;;

(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'from = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'queryId, v'amount, v'from, v'forward_payload));
}

;;
;; Type: TokenExcesses
;; Header: 0xd53276db
;; TLB: token_excesses#d53276db queryId:uint64 = TokenExcesses
;;

(slice, ((int))) $TokenExcesses$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3576854235);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: TokenDistrubuteInfo
;; TLB: _ name:^string tokenDistrubutedPercentage:int257 totalPhaseToken:coins percentage:int257 totalSuppliedToken:coins = TokenDistrubuteInfo
;;

builder $TokenDistrubuteInfo$_store(builder build_0, (slice, int, int, int, int) v) inline {
    var (v'name, v'tokenDistrubutedPercentage, v'totalPhaseToken, v'percentage, v'totalSuppliedToken) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_int(v'tokenDistrubutedPercentage, 257);
    build_0 = build_0.store_coins(v'totalPhaseToken);
    build_0 = build_0.store_int(v'percentage, 257);
    build_0 = build_0.store_coins(v'totalSuppliedToken);
    return build_0;
}

cell $TokenDistrubuteInfo$_store_cell((slice, int, int, int, int) v) inline {
    return $TokenDistrubuteInfo$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int, int))) $TokenDistrubuteInfo$_load(slice sc_0) inline {
    var v'name = sc_0~load_ref().begin_parse();
    var v'tokenDistrubutedPercentage = sc_0~load_int(257);
    var v'totalPhaseToken = sc_0~load_coins();
    var v'percentage = sc_0~load_int(257);
    var v'totalSuppliedToken = sc_0~load_coins();
    return (sc_0, (v'name, v'tokenDistrubutedPercentage, v'totalPhaseToken, v'percentage, v'totalSuppliedToken));
}

tuple $TokenDistrubuteInfo$_as_optional((slice, int, int, int, int) v) inline {
    var (v'name, v'tokenDistrubutedPercentage, v'totalPhaseToken, v'percentage, v'totalSuppliedToken) = v;
    return __tact_tuple_create_5(v'name, v'tokenDistrubutedPercentage, v'totalPhaseToken, v'percentage, v'totalSuppliedToken);
}

tuple $TokenDistrubuteInfo$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TokenDistrubuteInfo$_as_optional(sc~$TokenDistrubuteInfo$_load());
}

((slice, int, int, int, int)) $TokenDistrubuteInfo$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'name, int vvv'tokenDistrubutedPercentage, int vvv'totalPhaseToken, int vvv'percentage, int vvv'totalSuppliedToken) = __tact_tuple_destroy_5(v);
    return (vvv'name, vvv'tokenDistrubutedPercentage, vvv'totalPhaseToken, vvv'percentage, vvv'totalSuppliedToken);
}

((slice, int, int, int, int)) $TokenDistrubuteInfo$_constructor_name_tokenDistrubutedPercentage_totalPhaseToken_percentage_totalSuppliedToken(slice name, int tokenDistrubutedPercentage, int totalPhaseToken, int percentage, int totalSuppliedToken) inline {
    return (name, tokenDistrubutedPercentage, totalPhaseToken, percentage, totalSuppliedToken);
}

;;
;; Type: UserData
;; TLB: _ beneficiary:address totalToken:coins remainingToken:coins startTime:int257 vestingDuration:int257 lastClaimTime:int257 initialCliff:int257 releaseInterval:int257 phaseName:^string active:bool USDTToken:coins = UserData
;;

builder $UserData$_store(builder build_0, (slice, int, int, int, int, int, int, int, slice, int, int) v) inline_ref {
    var (v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'initialCliff, v'releaseInterval, v'phaseName, v'active, v'USDTToken) = v;
    build_0 = __tact_store_address(build_0, v'beneficiary);
    build_0 = build_0.store_coins(v'totalToken);
    build_0 = build_0.store_coins(v'remainingToken);
    build_0 = build_0.store_int(v'startTime, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'vestingDuration, 257);
    build_1 = build_1.store_int(v'lastClaimTime, 257);
    build_1 = build_1.store_int(v'initialCliff, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'releaseInterval, 257);
    build_2 = build_2.store_ref(begin_cell().store_slice(v'phaseName).end_cell());
    build_2 = build_2.store_int(v'active, 1);
    build_2 = build_2.store_coins(v'USDTToken);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $UserData$_store_cell((slice, int, int, int, int, int, int, int, slice, int, int) v) inline {
    return $UserData$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int, int, int, int, int, slice, int, int))) $UserData$_load(slice sc_0) inline_ref {
    var v'beneficiary = sc_0~__tact_load_address();
    var v'totalToken = sc_0~load_coins();
    var v'remainingToken = sc_0~load_coins();
    var v'startTime = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'vestingDuration = sc_1~load_int(257);
    var v'lastClaimTime = sc_1~load_int(257);
    var v'initialCliff = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'releaseInterval = sc_2~load_int(257);
    var v'phaseName = sc_2~load_ref().begin_parse();
    var v'active = sc_2~load_int(1);
    var v'USDTToken = sc_2~load_coins();
    return (sc_0, (v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'initialCliff, v'releaseInterval, v'phaseName, v'active, v'USDTToken));
}

tuple $UserData$_as_optional((slice, int, int, int, int, int, int, int, slice, int, int) v) inline {
    var (v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'initialCliff, v'releaseInterval, v'phaseName, v'active, v'USDTToken) = v;
    return __tact_tuple_create_11(v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'initialCliff, v'releaseInterval, v'phaseName, v'active, v'USDTToken);
}

tuple $UserData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $UserData$_as_optional(sc~$UserData$_load());
}

((slice, int, int, int, int, int, int, int, slice, int, int)) $UserData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'beneficiary, int vvv'totalToken, int vvv'remainingToken, int vvv'startTime, int vvv'vestingDuration, int vvv'lastClaimTime, int vvv'initialCliff, int vvv'releaseInterval, slice vvv'phaseName, int vvv'active, int vvv'USDTToken) = __tact_tuple_destroy_11(v);
    return (vvv'beneficiary, vvv'totalToken, vvv'remainingToken, vvv'startTime, vvv'vestingDuration, vvv'lastClaimTime, vvv'initialCliff, vvv'releaseInterval, vvv'phaseName, vvv'active, vvv'USDTToken);
}

tuple $UserData$_to_tuple(((slice, int, int, int, int, int, int, int, slice, int, int)) v) inline {
    var (v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'initialCliff, v'releaseInterval, v'phaseName, v'active, v'USDTToken) = v;
    return __tact_tuple_create_11(v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'initialCliff, v'releaseInterval, v'phaseName, v'active, v'USDTToken);
}

tuple $UserData$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $UserData$_to_tuple($UserData$_not_null(v)); 
}

tuple $UserData$_to_opt_external(tuple v) inline {
    var loaded = $UserData$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((slice, int, int, int, int, int, int, int, slice, int, int)) $UserData$_constructor_beneficiary_totalToken_remainingToken_startTime_vestingDuration_lastClaimTime_initialCliff_releaseInterval_phaseName_active_USDTToken(slice beneficiary, int totalToken, int remainingToken, int startTime, int vestingDuration, int lastClaimTime, int initialCliff, int releaseInterval, slice phaseName, int active, int USDTToken) inline {
    return (beneficiary, totalToken, remainingToken, startTime, vestingDuration, lastClaimTime, initialCliff, releaseInterval, phaseName, active, USDTToken);
}

;;
;; Type: TokenVestingInfo
;; TLB: _ beneficiary:address totalToken:coins remainingToken:coins startTime:int257 vestingDuration:int257 lastClaimTime:int257 releaseInterval:int257 initialCliff:int257 phaseName:^string active:bool USDTToken:coins = TokenVestingInfo
;;

builder $TokenVestingInfo$_store(builder build_0, (slice, int, int, int, int, int, int, int, slice, int, int) v) inline_ref {
    var (v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'releaseInterval, v'initialCliff, v'phaseName, v'active, v'USDTToken) = v;
    build_0 = __tact_store_address(build_0, v'beneficiary);
    build_0 = build_0.store_coins(v'totalToken);
    build_0 = build_0.store_coins(v'remainingToken);
    build_0 = build_0.store_int(v'startTime, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'vestingDuration, 257);
    build_1 = build_1.store_int(v'lastClaimTime, 257);
    build_1 = build_1.store_int(v'releaseInterval, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'initialCliff, 257);
    build_2 = build_2.store_ref(begin_cell().store_slice(v'phaseName).end_cell());
    build_2 = build_2.store_int(v'active, 1);
    build_2 = build_2.store_coins(v'USDTToken);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $TokenVestingInfo$_store_cell((slice, int, int, int, int, int, int, int, slice, int, int) v) inline {
    return $TokenVestingInfo$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int, int, int, int, int, slice, int, int))) $TokenVestingInfo$_load(slice sc_0) inline_ref {
    var v'beneficiary = sc_0~__tact_load_address();
    var v'totalToken = sc_0~load_coins();
    var v'remainingToken = sc_0~load_coins();
    var v'startTime = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'vestingDuration = sc_1~load_int(257);
    var v'lastClaimTime = sc_1~load_int(257);
    var v'releaseInterval = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'initialCliff = sc_2~load_int(257);
    var v'phaseName = sc_2~load_ref().begin_parse();
    var v'active = sc_2~load_int(1);
    var v'USDTToken = sc_2~load_coins();
    return (sc_0, (v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'releaseInterval, v'initialCliff, v'phaseName, v'active, v'USDTToken));
}

tuple $TokenVestingInfo$_as_optional((slice, int, int, int, int, int, int, int, slice, int, int) v) inline {
    var (v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'releaseInterval, v'initialCliff, v'phaseName, v'active, v'USDTToken) = v;
    return __tact_tuple_create_11(v'beneficiary, v'totalToken, v'remainingToken, v'startTime, v'vestingDuration, v'lastClaimTime, v'releaseInterval, v'initialCliff, v'phaseName, v'active, v'USDTToken);
}

tuple $TokenVestingInfo$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TokenVestingInfo$_as_optional(sc~$TokenVestingInfo$_load());
}

((slice, int, int, int, int, int, int, int, slice, int, int)) $TokenVestingInfo$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'beneficiary, int vvv'totalToken, int vvv'remainingToken, int vvv'startTime, int vvv'vestingDuration, int vvv'lastClaimTime, int vvv'releaseInterval, int vvv'initialCliff, slice vvv'phaseName, int vvv'active, int vvv'USDTToken) = __tact_tuple_destroy_11(v);
    return (vvv'beneficiary, vvv'totalToken, vvv'remainingToken, vvv'startTime, vvv'vestingDuration, vvv'lastClaimTime, vvv'releaseInterval, vvv'initialCliff, vvv'phaseName, vvv'active, vvv'USDTToken);
}

((slice, int, int, int, int, int, int, int, slice, int, int)) $TokenVestingInfo$_constructor_beneficiary_totalToken_remainingToken_startTime_vestingDuration_lastClaimTime_releaseInterval_initialCliff_phaseName_active_USDTToken(slice beneficiary, int totalToken, int remainingToken, int startTime, int vestingDuration, int lastClaimTime, int releaseInterval, int initialCliff, slice phaseName, int active, int USDTToken) inline {
    return (beneficiary, totalToken, remainingToken, startTime, vestingDuration, lastClaimTime, releaseInterval, initialCliff, phaseName, active, USDTToken);
}

;;
;; Type: UserArrayData
;; TLB: _ data:dict<int, ^UserData{beneficiary:address,totalToken:coins,remainingToken:coins,startTime:int257,vestingDuration:int257,lastClaimTime:int257,initialCliff:int257,releaseInterval:int257,phaseName:^string,active:bool,USDTToken:coins}> size:int257 = UserArrayData
;;

builder $UserArrayData$_store(builder build_0, (cell, int) v) inline {
    var (v'data, v'size) = v;
    build_0 = build_0.store_dict(v'data);
    build_0 = build_0.store_int(v'size, 257);
    return build_0;
}

cell $UserArrayData$_store_cell((cell, int) v) inline {
    return $UserArrayData$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, int))) $UserArrayData$_load(slice sc_0) inline {
    var v'data = sc_0~load_dict();
    var v'size = sc_0~load_int(257);
    return (sc_0, (v'data, v'size));
}

tuple $UserArrayData$_as_optional((cell, int) v) inline {
    var (v'data, v'size) = v;
    return __tact_tuple_create_2(v'data, v'size);
}

tuple $UserArrayData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $UserArrayData$_as_optional(sc~$UserArrayData$_load());
}

((cell, int)) $UserArrayData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'data, int vvv'size) = __tact_tuple_destroy_2(v);
    return (vvv'data, vvv'size);
}

((cell, int)) $UserArrayData$_constructor_data_size(cell data, int size) inline {
    return (data, size);
}

;;
;; Type: RefferData
;; TLB: _ refferalAddress:address amount:int257 claim:bool = RefferData
;;

builder $RefferData$_store(builder build_0, (slice, int, int) v) inline {
    var (v'refferalAddress, v'amount, v'claim) = v;
    build_0 = __tact_store_address(build_0, v'refferalAddress);
    build_0 = build_0.store_int(v'amount, 257);
    build_0 = build_0.store_int(v'claim, 1);
    return build_0;
}

cell $RefferData$_store_cell((slice, int, int) v) inline {
    return $RefferData$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int))) $RefferData$_load(slice sc_0) inline {
    var v'refferalAddress = sc_0~__tact_load_address();
    var v'amount = sc_0~load_int(257);
    var v'claim = sc_0~load_int(1);
    return (sc_0, (v'refferalAddress, v'amount, v'claim));
}

tuple $RefferData$_as_optional((slice, int, int) v) inline {
    var (v'refferalAddress, v'amount, v'claim) = v;
    return __tact_tuple_create_3(v'refferalAddress, v'amount, v'claim);
}

tuple $RefferData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $RefferData$_as_optional(sc~$RefferData$_load());
}

((slice, int, int)) $RefferData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'refferalAddress, int vvv'amount, int vvv'claim) = __tact_tuple_destroy_3(v);
    return (vvv'refferalAddress, vvv'amount, vvv'claim);
}

((slice, int, int)) $RefferData$_constructor_refferalAddress_amount_claim(slice refferalAddress, int amount, int claim) inline {
    return (refferalAddress, amount, claim);
}

;;
;; Type: RefferDetails
;; TLB: _ reffer:dict<int, ^RefferData{refferalAddress:address,amount:int257,claim:bool}> size:int257 = RefferDetails
;;

builder $RefferDetails$_store(builder build_0, (cell, int) v) inline {
    var (v'reffer, v'size) = v;
    build_0 = build_0.store_dict(v'reffer);
    build_0 = build_0.store_int(v'size, 257);
    return build_0;
}

cell $RefferDetails$_store_cell((cell, int) v) inline {
    return $RefferDetails$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, int))) $RefferDetails$_load(slice sc_0) inline {
    var v'reffer = sc_0~load_dict();
    var v'size = sc_0~load_int(257);
    return (sc_0, (v'reffer, v'size));
}

tuple $RefferDetails$_as_optional((cell, int) v) inline {
    var (v'reffer, v'size) = v;
    return __tact_tuple_create_2(v'reffer, v'size);
}

tuple $RefferDetails$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $RefferDetails$_as_optional(sc~$RefferDetails$_load());
}

_ $RefferDetails$_get_reffer((cell, int) v) inline {
    var (v'reffer, v'size) = v;
    return v'reffer;
}

_ $RefferDetails$_get_size((cell, int) v) inline {
    var (v'reffer, v'size) = v;
    return v'size;
}

((cell, int)) $RefferDetails$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'reffer, int vvv'size) = __tact_tuple_destroy_2(v);
    return (vvv'reffer, vvv'size);
}

((cell, int)) $RefferDetails$_constructor_reffer_size(cell reffer, int size) inline {
    return (reffer, size);
}

;;
;; Type: PrivateSaleArrayData
;; TLB: _ data:dict<int, ^TokenVestingInfo{beneficiary:address,totalToken:coins,remainingToken:coins,startTime:int257,vestingDuration:int257,lastClaimTime:int257,releaseInterval:int257,initialCliff:int257,phaseName:^string,active:bool,USDTToken:coins}> size:int257 = PrivateSaleArrayData
;;

builder $PrivateSaleArrayData$_store(builder build_0, (cell, int) v) inline {
    var (v'data, v'size) = v;
    build_0 = build_0.store_dict(v'data);
    build_0 = build_0.store_int(v'size, 257);
    return build_0;
}

cell $PrivateSaleArrayData$_store_cell((cell, int) v) inline {
    return $PrivateSaleArrayData$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, int))) $PrivateSaleArrayData$_load(slice sc_0) inline {
    var v'data = sc_0~load_dict();
    var v'size = sc_0~load_int(257);
    return (sc_0, (v'data, v'size));
}

tuple $PrivateSaleArrayData$_as_optional((cell, int) v) inline {
    var (v'data, v'size) = v;
    return __tact_tuple_create_2(v'data, v'size);
}

tuple $PrivateSaleArrayData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PrivateSaleArrayData$_as_optional(sc~$PrivateSaleArrayData$_load());
}

((cell, int)) $PrivateSaleArrayData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'data, int vvv'size) = __tact_tuple_destroy_2(v);
    return (vvv'data, vvv'size);
}

((cell, int)) $PrivateSaleArrayData$_constructor_data_size(cell data, int size) inline {
    return (data, size);
}

;;
;; Type: MarketingArrayData
;; TLB: _ data:dict<int, ^TokenVestingInfo{beneficiary:address,totalToken:coins,remainingToken:coins,startTime:int257,vestingDuration:int257,lastClaimTime:int257,releaseInterval:int257,initialCliff:int257,phaseName:^string,active:bool,USDTToken:coins}> size:int257 = MarketingArrayData
;;

builder $MarketingArrayData$_store(builder build_0, (cell, int) v) inline {
    var (v'data, v'size) = v;
    build_0 = build_0.store_dict(v'data);
    build_0 = build_0.store_int(v'size, 257);
    return build_0;
}

cell $MarketingArrayData$_store_cell((cell, int) v) inline {
    return $MarketingArrayData$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, int))) $MarketingArrayData$_load(slice sc_0) inline {
    var v'data = sc_0~load_dict();
    var v'size = sc_0~load_int(257);
    return (sc_0, (v'data, v'size));
}

tuple $MarketingArrayData$_as_optional((cell, int) v) inline {
    var (v'data, v'size) = v;
    return __tact_tuple_create_2(v'data, v'size);
}

tuple $MarketingArrayData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $MarketingArrayData$_as_optional(sc~$MarketingArrayData$_load());
}

((cell, int)) $MarketingArrayData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'data, int vvv'size) = __tact_tuple_destroy_2(v);
    return (vvv'data, vvv'size);
}

((cell, int)) $MarketingArrayData$_constructor_data_size(cell data, int size) inline {
    return (data, size);
}

;;
;; Type: TeamArrayData
;; TLB: _ data:dict<int, ^TokenVestingInfo{beneficiary:address,totalToken:coins,remainingToken:coins,startTime:int257,vestingDuration:int257,lastClaimTime:int257,releaseInterval:int257,initialCliff:int257,phaseName:^string,active:bool,USDTToken:coins}> size:int257 = TeamArrayData
;;

builder $TeamArrayData$_store(builder build_0, (cell, int) v) inline {
    var (v'data, v'size) = v;
    build_0 = build_0.store_dict(v'data);
    build_0 = build_0.store_int(v'size, 257);
    return build_0;
}

cell $TeamArrayData$_store_cell((cell, int) v) inline {
    return $TeamArrayData$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, int))) $TeamArrayData$_load(slice sc_0) inline {
    var v'data = sc_0~load_dict();
    var v'size = sc_0~load_int(257);
    return (sc_0, (v'data, v'size));
}

tuple $TeamArrayData$_as_optional((cell, int) v) inline {
    var (v'data, v'size) = v;
    return __tact_tuple_create_2(v'data, v'size);
}

tuple $TeamArrayData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TeamArrayData$_as_optional(sc~$TeamArrayData$_load());
}

((cell, int)) $TeamArrayData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'data, int vvv'size) = __tact_tuple_destroy_2(v);
    return (vvv'data, vvv'size);
}

((cell, int)) $TeamArrayData$_constructor_data_size(cell data, int size) inline {
    return (data, size);
}

;;
;; Type: AdvisorArrayData
;; TLB: _ data:dict<int, ^TokenVestingInfo{beneficiary:address,totalToken:coins,remainingToken:coins,startTime:int257,vestingDuration:int257,lastClaimTime:int257,releaseInterval:int257,initialCliff:int257,phaseName:^string,active:bool,USDTToken:coins}> size:int257 = AdvisorArrayData
;;

builder $AdvisorArrayData$_store(builder build_0, (cell, int) v) inline {
    var (v'data, v'size) = v;
    build_0 = build_0.store_dict(v'data);
    build_0 = build_0.store_int(v'size, 257);
    return build_0;
}

cell $AdvisorArrayData$_store_cell((cell, int) v) inline {
    return $AdvisorArrayData$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, int))) $AdvisorArrayData$_load(slice sc_0) inline {
    var v'data = sc_0~load_dict();
    var v'size = sc_0~load_int(257);
    return (sc_0, (v'data, v'size));
}

tuple $AdvisorArrayData$_as_optional((cell, int) v) inline {
    var (v'data, v'size) = v;
    return __tact_tuple_create_2(v'data, v'size);
}

tuple $AdvisorArrayData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $AdvisorArrayData$_as_optional(sc~$AdvisorArrayData$_load());
}

((cell, int)) $AdvisorArrayData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'data, int vvv'size) = __tact_tuple_destroy_2(v);
    return (vvv'data, vvv'size);
}

((cell, int)) $AdvisorArrayData$_constructor_data_size(cell data, int size) inline {
    return (data, size);
}

;;
;; Type: TreasuryArrayData
;; TLB: _ data:dict<int, ^TokenVestingInfo{beneficiary:address,totalToken:coins,remainingToken:coins,startTime:int257,vestingDuration:int257,lastClaimTime:int257,releaseInterval:int257,initialCliff:int257,phaseName:^string,active:bool,USDTToken:coins}> size:int257 = TreasuryArrayData
;;

builder $TreasuryArrayData$_store(builder build_0, (cell, int) v) inline {
    var (v'data, v'size) = v;
    build_0 = build_0.store_dict(v'data);
    build_0 = build_0.store_int(v'size, 257);
    return build_0;
}

cell $TreasuryArrayData$_store_cell((cell, int) v) inline {
    return $TreasuryArrayData$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, int))) $TreasuryArrayData$_load(slice sc_0) inline {
    var v'data = sc_0~load_dict();
    var v'size = sc_0~load_int(257);
    return (sc_0, (v'data, v'size));
}

tuple $TreasuryArrayData$_as_optional((cell, int) v) inline {
    var (v'data, v'size) = v;
    return __tact_tuple_create_2(v'data, v'size);
}

tuple $TreasuryArrayData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TreasuryArrayData$_as_optional(sc~$TreasuryArrayData$_load());
}

((cell, int)) $TreasuryArrayData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'data, int vvv'size) = __tact_tuple_destroy_2(v);
    return (vvv'data, vvv'size);
}

((cell, int)) $TreasuryArrayData$_constructor_data_size(cell data, int size) inline {
    return (data, size);
}

;;
;; Type: ClaimReferralTokens
;; Header: 0x76a9753f
;; TLB: claim_referral_tokens#76a9753f cenderadd:address = ClaimReferralTokens
;;

(slice, ((slice))) $ClaimReferralTokens$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1990817087);
    var v'cenderadd = sc_0~__tact_load_address();
    return (sc_0, (v'cenderadd));
}

;;
;; Type: PrivateSaleMessage
;; Header: 0x9c65dad8
;; TLB: private_sale_message#9c65dad8 amount:int257 UserAddress:address = PrivateSaleMessage
;;

(slice, ((int, slice))) $PrivateSaleMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2623920856);
    var v'amount = sc_0~load_int(257);
    var v'UserAddress = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'UserAddress));
}

;;
;; Type: MarketingMessage
;; Header: 0x5e97c4a3
;; TLB: marketing_message#5e97c4a3 amount:int257 UserAddress:address = MarketingMessage
;;

(slice, ((int, slice))) $MarketingMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1587004579);
    var v'amount = sc_0~load_int(257);
    var v'UserAddress = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'UserAddress));
}

;;
;; Type: TeamMessage
;; Header: 0xd6257545
;; TLB: team_message#d6257545 amount:int257 UserAddress:address = TeamMessage
;;

(slice, ((int, slice))) $TeamMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3592779077);
    var v'amount = sc_0~load_int(257);
    var v'UserAddress = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'UserAddress));
}

;;
;; Type: AdvisorMessage
;; Header: 0x1e6127b4
;; TLB: advisor_message#1e6127b4 amount:int257 UserAddress:address = AdvisorMessage
;;

(slice, ((int, slice))) $AdvisorMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 509683636);
    var v'amount = sc_0~load_int(257);
    var v'UserAddress = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'UserAddress));
}

;;
;; Type: TreasuryMessage
;; Header: 0xfa93f8ed
;; TLB: treasury_message#fa93f8ed amount:int257 UserAddress:address = TreasuryMessage
;;

(slice, ((int, slice))) $TreasuryMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4204001517);
    var v'amount = sc_0~load_int(257);
    var v'UserAddress = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'UserAddress));
}

;;
;; Type: ClaimTokens
;; Header: 0x052de464
;; TLB: claim_tokens#052de464 amount:int257 cenderadd:address senderadd:address = ClaimTokens
;;

(slice, ((int, slice, slice))) $ClaimTokens$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 86893668);
    var v'amount = sc_0~load_int(257);
    var v'cenderadd = sc_0~__tact_load_address();
    var v'senderadd = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'cenderadd, v'senderadd));
}

;;
;; Type: ClaimSingleToken
;; Header: 0x9d9fc853
;; TLB: claim_single_token#9d9fc853 index:int257 cenderadd:address senderadd:address = ClaimSingleToken
;;

(slice, ((int, slice, slice))) $ClaimSingleToken$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2644494419);
    var v'index = sc_0~load_int(257);
    var v'cenderadd = sc_0~__tact_load_address();
    var v'senderadd = sc_0~__tact_load_address();
    return (sc_0, (v'index, v'cenderadd, v'senderadd));
}

;;
;; Type: ClaimPrivateSaleTokens
;; Header: 0x107d24eb
;; TLB: claim_private_sale_tokens#107d24eb index:int257 cenderadd:address senderadd:address = ClaimPrivateSaleTokens
;;

(slice, ((int, slice, slice))) $ClaimPrivateSaleTokens$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 276636907);
    var v'index = sc_0~load_int(257);
    var v'cenderadd = sc_0~__tact_load_address();
    var v'senderadd = sc_0~__tact_load_address();
    return (sc_0, (v'index, v'cenderadd, v'senderadd));
}

;;
;; Type: ClaimMarketingeTokens
;; Header: 0x1dec6ced
;; TLB: claim_marketinge_tokens#1dec6ced index:int257 cenderadd:address senderadd:address = ClaimMarketingeTokens
;;

(slice, ((int, slice, slice))) $ClaimMarketingeTokens$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 502033645);
    var v'index = sc_0~load_int(257);
    var v'cenderadd = sc_0~__tact_load_address();
    var v'senderadd = sc_0~__tact_load_address();
    return (sc_0, (v'index, v'cenderadd, v'senderadd));
}

;;
;; Type: ClaimTeamTokens
;; Header: 0xb07b0498
;; TLB: claim_team_tokens#b07b0498 index:int257 cenderadd:address senderadd:address = ClaimTeamTokens
;;

(slice, ((int, slice, slice))) $ClaimTeamTokens$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2960852120);
    var v'index = sc_0~load_int(257);
    var v'cenderadd = sc_0~__tact_load_address();
    var v'senderadd = sc_0~__tact_load_address();
    return (sc_0, (v'index, v'cenderadd, v'senderadd));
}

;;
;; Type: ClaimAdvisorTokens
;; Header: 0x082a491c
;; TLB: claim_advisor_tokens#082a491c index:int257 cenderadd:address senderadd:address = ClaimAdvisorTokens
;;

(slice, ((int, slice, slice))) $ClaimAdvisorTokens$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 136988956);
    var v'index = sc_0~load_int(257);
    var v'cenderadd = sc_0~__tact_load_address();
    var v'senderadd = sc_0~__tact_load_address();
    return (sc_0, (v'index, v'cenderadd, v'senderadd));
}

;;
;; Type: ClaimTreasuryTokens
;; Header: 0x2b0d7ffd
;; TLB: claim_treasury_tokens#2b0d7ffd index:int257 cenderadd:address senderadd:address = ClaimTreasuryTokens
;;

(slice, ((int, slice, slice))) $ClaimTreasuryTokens$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 722305021);
    var v'index = sc_0~load_int(257);
    var v'cenderadd = sc_0~__tact_load_address();
    var v'senderadd = sc_0~__tact_load_address();
    return (sc_0, (v'index, v'cenderadd, v'senderadd));
}

;;
;; Type: SamplePresale
;;

builder $SamplePresale$_store(builder build_0, (int, slice, int, cell, cell, cell, cell, cell, cell, cell, cell, cell) v) inline {
    var (v'TonVal, v'owner, v'TonBalance, v'TokenData, v'SeedData, v'PrivateSaleData, v'MarketingData, v'TeamData, v'AdvisorData, v'TreasuryData, v'checkReferrers, v'refferInfo) = v;
    build_0 = build_0.store_int(v'TonVal, 257);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_coins(v'TonBalance);
    build_0 = build_0.store_dict(v'TokenData);
    build_0 = build_0.store_dict(v'SeedData);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'PrivateSaleData);
    build_1 = build_1.store_dict(v'MarketingData);
    build_1 = build_1.store_dict(v'TeamData);
    var build_2 = begin_cell();
    build_2 = build_2.store_dict(v'AdvisorData);
    build_2 = build_2.store_dict(v'TreasuryData);
    build_2 = build_2.store_dict(v'checkReferrers);
    var build_3 = begin_cell();
    build_3 = build_3.store_dict(v'refferInfo);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, slice, int, cell, cell, cell, cell, cell, cell, cell, cell, cell))) $SamplePresale$_load(slice sc_0) inline {
    var v'TonVal = sc_0~load_int(257);
    var v'owner = sc_0~__tact_load_address();
    var v'TonBalance = sc_0~load_coins();
    var v'TokenData = sc_0~load_dict();
    var v'SeedData = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'PrivateSaleData = sc_1~load_dict();
    var v'MarketingData = sc_1~load_dict();
    var v'TeamData = sc_1~load_dict();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'AdvisorData = sc_2~load_dict();
    var v'TreasuryData = sc_2~load_dict();
    var v'checkReferrers = sc_2~load_dict();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'refferInfo = sc_3~load_dict();
    return (sc_0, (v'TonVal, v'owner, v'TonBalance, v'TokenData, v'SeedData, v'PrivateSaleData, v'MarketingData, v'TeamData, v'AdvisorData, v'TreasuryData, v'checkReferrers, v'refferInfo));
}

(int, slice, int, cell, cell, cell, cell, cell, cell, cell, cell, cell) $SamplePresale$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$SamplePresale$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $SamplePresale$_contract_init();
    }
}

() $SamplePresale$_contract_store((int, slice, int, cell, cell, cell, cell, cell, cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $SamplePresale$_store(b, v);
    set_data(b.end_cell());
}