global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;
global int __tact_randomized;

slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_if(137, h == 1279);
    throw_unless(136, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    var addr = b.end_cell().begin_parse();
    return __tact_verify_address(addr);
}

int __tact_my_balance() inline {
    return pair_first(get_balance());
}

forall X -> X __tact_not_null(X x) inline {
    throw_if(128, null?(x)); return x;
}

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) "DICTDEL";

((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) "DICTSETREF";

(slice, int) __tact_dict_get(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGETREF" "NULLSWAPIFNOT";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

builder __tact_store_bool(builder b, int v) inline {
    return b.store_int(v, 1);
}

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(int, cell, int) __tact_dict_min_int_cell(cell d, int kl) inline {
    var (key, value, flag) = idict_get_min_ref?(d, kl);
    if (flag) {
        return (key, value, flag);
    } else {
        return (null(), null(), flag);
    }
}

(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot) inline {
    var (key, value, flag) = idict_get_next?(d, kl, pivot);
    if (flag) {
        return (key, value~load_ref(), flag);
    } else {
        return (null(), null(), flag);
    }
}

(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return __tact_dict_set_ref(d, kl, k, v);
    }
}

cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get_ref(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_slice(v)), ());
    }
}

slice __tact_dict_get_slice_slice(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

int __tact_slice_eq_bits(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v) asm "2 TUPLE";

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm "2 UNTUPLE";

forall X0, X1, X2, X3 -> tuple __tact_tuple_create_4((X0, X1, X2, X3) v) asm "4 TUPLE";

forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v) asm "4 UNTUPLE";

forall X0, X1, X2, X3, X4 -> tuple __tact_tuple_create_5((X0, X1, X2, X3, X4) v) asm "5 TUPLE";

forall X0, X1, X2, X3, X4 -> (X0, X1, X2, X3, X4) __tact_tuple_destroy_5(tuple v) asm "5 UNTUPLE";

forall X0, X1, X2, X3, X4, X5, X6 -> tuple __tact_tuple_create_7((X0, X1, X2, X3, X4, X5, X6) v) asm "7 TUPLE";

forall X0, X1, X2, X3, X4, X5, X6 -> (X0, X1, X2, X3, X4, X5, X6) __tact_tuple_destroy_7(tuple v) asm "7 UNTUPLE";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> tuple __tact_tuple_create_11((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) v) asm "11 TUPLE";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10) __tact_tuple_destroy_11(tuple v) asm "11 UNTUPLE";

slice __tact_float_to_string(int src, int digits) inline_ref {
    throw_if(134, (digits <= 0) | (digits > 77));
    builder b = begin_cell();
    
    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }
    
    ;; Process rem part
    int skip = true;
    int len = 0;
    int rem = 0;
    tuple t = empty_tuple();
    repeat(digits) {
        (src, rem) = src.divmod(10);
        if ( ~ ( skip & ( rem == 0 ) ) ) {
            skip = false;
            t~tpush(rem + 48);
            len = len + 1;
        }
    }
    
    ;; Process dot
    if (~ skip) {
        t~tpush(46);
        len = len + 1;
    }
    
    ;; Main
    do {
        (src, rem) = src.divmod(10);
        t~tpush(rem + 48);
        len = len + 1;
    } until (src == 0);
    
    ;; Assemble
    int c = len - 1;
    repeat(len) {
        int v = t.at(c);
        b = b.store_uint(v, 8);
        c = c - 1;
    }
    
    ;; Result
    return b.end_cell().begin_parse();
}

() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (( ((~ null?($params'code))) ? (true) : ((~ null?($params'data))) )) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

slice $Int$_fun_toCoinsString(int $self) impure inline {
    var ($self) = $self;
    return __tact_float_to_string($self, 9);
}

((int, int, int, int, int, int, int, int, int, int, slice, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell), ()) $SamplePresale$_fun_forward((int, int, int, int, int, int, int, int, int, int, slice, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'totalUsdtAmount, $self'seedRoundTime, $self'presaleStatus, $self'BZZNPriceInUSDT, $self'referralPercentage, $self'minimumUSDTAmount, $self'maximumUSDTAmount, $self'lastCreatedRound, $self'activeRound, $self'XYZ, $self'owner, $self'TokenData, $self'DynamicRoundData, $self'SeedData, $self'PrivateSaleData, $self'MarketingData, $self'TeamData, $self'AdvisorData, $self'TreasuryData, $self'checkReferrers, $self'refferInfo)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if ((0 > 0)) {
        var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = __tact_my_balance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            raw_reserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, (128 | 2), $body, $code, $data));
            return (($self'totalUsdtAmount, $self'seedRoundTime, $self'presaleStatus, $self'BZZNPriceInUSDT, $self'referralPercentage, $self'minimumUSDTAmount, $self'maximumUSDTAmount, $self'lastCreatedRound, $self'activeRound, $self'XYZ, $self'owner, $self'TokenData, $self'DynamicRoundData, $self'SeedData, $self'PrivateSaleData, $self'MarketingData, $self'TeamData, $self'AdvisorData, $self'TreasuryData, $self'checkReferrers, $self'refferInfo), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, (64 | 2), $body, $code, $data));
    return (($self'totalUsdtAmount, $self'seedRoundTime, $self'presaleStatus, $self'BZZNPriceInUSDT, $self'referralPercentage, $self'minimumUSDTAmount, $self'maximumUSDTAmount, $self'lastCreatedRound, $self'activeRound, $self'XYZ, $self'owner, $self'TokenData, $self'DynamicRoundData, $self'SeedData, $self'PrivateSaleData, $self'MarketingData, $self'TeamData, $self'AdvisorData, $self'TreasuryData, $self'checkReferrers, $self'refferInfo), ());
}

((int, int, int, int, int, int, int, int, int, int, slice, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell), ()) $SamplePresale$_fun_notify((int, int, int, int, int, int, int, int, int, int, slice, cell, cell, cell, cell, cell, cell, cell, cell, cell, cell) $self, cell $body) impure inline {
    var (($self'totalUsdtAmount, $self'seedRoundTime, $self'presaleStatus, $self'BZZNPriceInUSDT, $self'referralPercentage, $self'minimumUSDTAmount, $self'maximumUSDTAmount, $self'lastCreatedRound, $self'activeRound, $self'XYZ, $self'owner, $self'TokenData, $self'DynamicRoundData, $self'SeedData, $self'PrivateSaleData, $self'MarketingData, $self'TeamData, $self'AdvisorData, $self'TreasuryData, $self'checkReferrers, $self'refferInfo)) = $self;
    ($self'totalUsdtAmount, $self'seedRoundTime, $self'presaleStatus, $self'BZZNPriceInUSDT, $self'referralPercentage, $self'minimumUSDTAmount, $self'maximumUSDTAmount, $self'lastCreatedRound, $self'activeRound, $self'XYZ, $self'owner, $self'TokenData, $self'DynamicRoundData, $self'SeedData, $self'PrivateSaleData, $self'MarketingData, $self'TeamData, $self'AdvisorData, $self'TreasuryData, $self'checkReferrers, $self'refferInfo)~$SamplePresale$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return (($self'totalUsdtAmount, $self'seedRoundTime, $self'presaleStatus, $self'BZZNPriceInUSDT, $self'referralPercentage, $self'minimumUSDTAmount, $self'maximumUSDTAmount, $self'lastCreatedRound, $self'activeRound, $self'XYZ, $self'owner, $self'TokenData, $self'DynamicRoundData, $self'SeedData, $self'PrivateSaleData, $self'MarketingData, $self'TeamData, $self'AdvisorData, $self'TreasuryData, $self'checkReferrers, $self'refferInfo), ());
}